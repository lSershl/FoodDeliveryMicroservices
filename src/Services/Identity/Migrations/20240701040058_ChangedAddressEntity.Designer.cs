// <auto-generated />
using System;
using Identity.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Identity.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240701040058_ChangedAddressEntity")]
    partial class ChangedAddressEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Identity.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Apartment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("FullAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("House")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("SavedUserAddresses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2d29819f-6ec7-4297-922a-36c6da163695"),
                            Apartment = "1",
                            City = "Братск",
                            CustomerId = new Guid("b3cf2665-45b8-4437-8e1f-8a29b8b734fa"),
                            FullAddress = "Братск, Советская 1-1",
                            House = "1",
                            Street = "Советская"
                        });
                });

            modelBuilder.Entity("Identity.Entities.PaymentCard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Cvv")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Expiration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("SavedUserPaymentCards");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11cb7280-2194-419b-9104-8e820d38af9d"),
                            CardHolderName = "IVAN IVANOV",
                            CardNumber = "1111 2222 3333 4444",
                            CustomerId = new Guid("b3cf2665-45b8-4437-8e1f-8a29b8b734fa"),
                            Cvv = "111",
                            Expiration = "10/25"
                        });
                });

            modelBuilder.Entity("Identity.Entities.User", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Birthday")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CustomerId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            CustomerId = new Guid("b3cf2665-45b8-4437-8e1f-8a29b8b734fa"),
                            Birthday = new DateTime(2024, 7, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "test@gmail.com",
                            Name = "Test User",
                            Password = "test",
                            PhoneNumber = "+79012223344"
                        });
                });

            modelBuilder.Entity("Identity.Entities.Address", b =>
                {
                    b.HasOne("Identity.Entities.User", "User")
                        .WithMany("SavedAddresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Identity.Entities.PaymentCard", b =>
                {
                    b.HasOne("Identity.Entities.User", "User")
                        .WithMany("SavedPaymentCards")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Identity.Entities.User", b =>
                {
                    b.Navigation("SavedAddresses");

                    b.Navigation("SavedPaymentCards");
                });
#pragma warning restore 612, 618
        }
    }
}
